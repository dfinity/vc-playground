/// Candid interface of the example verifiable credentials (VC) issuer, which implements
/// a "meta-issuer" functionality.  This is a demo-issuer, that allows experimenting with
/// two roles of the VC flow, namely issuing VCs, and using them for attribute sharing.
/// The dapp allows any user become an issuer of VCs about about users' attributes,
/// and to earn VCs issued by other users, for sharing with relying parties.
/// For simplicity, meta-issuer issues credentials of a single type, `VerifiedMember`,
/// that certify membership in a given group, and have the following spec:
///
///   CredentialSpec {
///     credential_type: "VerifiedMember",
///     arguments: {
///       "groupName": ArgumentValue::String(<some group name>),
///       "owner": ArgumentValue::String(<text-representation of user's principal>)
///     },
///   }
///
/// This structure allows then for simulating arbitrary credentials/attributes via
/// appropriate naming of the group, e.g. "Verified Adult", or "Resident of Switzerland".
/// Note that a real, non-demo, issuer would rather use a separate credential spec for each
/// type of credential, that would allow also for additional, type-specific arguments,
/// for example, for age verification one could use:
///
///   CredentialSpec {
///     credential_type: "VerifiedAdult",
///     arguments: {
///       "minAge": ArgumentValue::Int(<min. age>),
///     },
///   }
///
/// Each user can create groups with arbitrary names, but any given user can create
/// at most one group with a given group name.  In other words, every group is identified
/// by a tuple (<group name>, <owner's principal>). Again, this is for simplicity only --
/// in a real, non-demo issuer using user's principal for identifying a group would not advisable,
/// as it could affect user's privacy.
///
/// The owner of a group manages the membership in the group (accepting or rejecting
/// membership requests), which maps to obtaining (or not) the VC implied by the group's name.
/// The owner of a group is perceived as "the issuer" of the corresponding VC.
///
/// Moreover, each user can request membership in any other group created in the dapp,
/// which maps to applying for the VC implied by the group's name.
///
/// The interface below contains both the functionality required by the VC-spec
/// (https://github.com/dfinity/internet-identity/blob/main/docs/vc-spec.md)
/// and additional APIs for group management, and for configuring the canister.

/// Specification of a requested credential.
type CredentialSpec = record {
    credential_type : text;
    /// arguments are optional, and specific to the credential_type
    arguments : opt vec record { text; ArgumentValue };
};
type ArgumentValue = variant { "Int" : int32; String : text };

/// Types for ICRC-21 consent message, cf.
/// https://github.com/dfinity/wg-identity-authentication/blob/main/topics/icrc_21_consent_msg.md
type Icrc21ConsentInfo = record { consent_message : text; language : text };
type Icrc21ConsentPreferences = record { language : text };
type Icrc21Error = variant {
    GenericError : record { description : text; error_code : nat };
    UnsupportedCanisterCall : Icrc21ErrorInfo;
    ConsentMessageUnavailable : Icrc21ErrorInfo;
};
type Icrc21ErrorInfo = record { description : text };
type Icrc21VcConsentMessageRequest = record {
    preferences : Icrc21ConsentPreferences;
    credential_spec : CredentialSpec;
};

/// Types for requesting issuance of a credential.
/// The issuance proceeds in two steps:
///  - `prepare_credential`, and
///  - `get_credential`
/// where the split of work between the two steps depends on the specifics of the issuer,
/// and the second second step returns the actual credential (if any).
/// The two steps can use `prepared_context`-value to transfer information between them.

/// Types for `prepare_credential`.
type PrepareCredentialRequest = record {
    signed_id_alias : SignedIdAlias;
    credential_spec : CredentialSpec;
};
type PreparedCredentialData = record { prepared_context : opt vec nat8 };

/// Types for `get_credential`.
type GetCredentialRequest = record {
    signed_id_alias : SignedIdAlias;
    credential_spec : CredentialSpec;
    prepared_context : opt vec nat8;
};

type SignedIdAlias = record {
    credential_jws : text;
};
type IssuedCredentialData = record { vc_jws : text };
type IssueCredentialError = variant {
    /// The caller is not known to the issuer.  Caller should register first with the issuer before retrying.
    UnknownSubject : text;
    /// The caller is not authorized to obtain the requested credential.  Caller requested a credential
    /// for a different principal, or the issuer does not have sufficient knowledge about the caller
    /// to issue the requested credential.
    UnauthorizedSubject : text;
    /// The id_alias credential provided by the identity provider is invalid.
    InvalidIdAlias : text;
    /// The issuer does not issue credentials described in the credential spec.
    UnsupportedCredentialSpec : text;
    /// Internal errors, indicate malfunctioning of the issuer.
    SignatureNotFound : text;
    Internal : text;
};

/// Types for `derivation_origin`.
type DerivationOriginRequest = record {
    frontend_hostname : text;
};
type DerivationOriginData = record { origin : text };
type DerivationOriginError = variant {
  Internal : text;
  UnsupportedOrigin : text;
};

/// Configuration specific to this issuer.
type IssuerInit = record {
    /// Root of trust for checking canister signatures.
    ic_root_key_der : blob;
    /// List of canister ids that are allowed to provide id alias credentials.
    idp_canister_ids : vec principal;
    /// The derivation origin to be used by the issuer.
    derivation_origin : text;
    /// Frontend hostname be used by the issuer.
    frontend_hostname : text;
};

/// Options related to HTTP handling

type HeaderField = record {
    text;
    text;
};

type HttpRequest = record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
    certificate_version: opt nat16;
};

type HttpResponse = record {
    status_code: nat16;
    headers: vec HeaderField;
    body: blob;
};

/// Types for user, group and group membership management.

type TimestampNs = nat64;

type UserData = record {
    user_nickname : opt text;
    issuer_nickname : opt text;
};

type SetUserRequest = record {
    user_data : UserData
};

type ListGroupsRequest = record {
    group_name_substring : opt text;
};

type GetGroupRequest = record {
    group_name : text;
};

type AddGroupRequest = record {
    group_name : text;
};

type JoinGroupRequest = record {
    group_name : text;
    owner : principal;
    vc_arguments: opt VcArguments;
};

type MembershipUpdate = record {
  member : principal;
  new_status : MembershipStatus;
};

type UpdateMembershipRequest = record {
    group_name : text;
    updates : vec MembershipUpdate;
};

type GroupStats = record {
    member_count: nat32;
    created_timestamp_ns : TimestampNs;
};

type MembershipStatus = variant {
    PendingReview;
    Accepted;
    Rejected;
};

type VcArguments = vec record { text; ArgumentValue };

type GroupType = record {
    group_name: text;
    credential_spec: CredentialSpec;
};

type GroupTypes = record {
    types: vec GroupType;
};

type PublicGroupData = record {
   group_name : text;
   owner : principal;
   issuer_nickname : text;
   stats : GroupStats;
   membership_status: opt MembershipStatus;  // set only for authenticated calls
   vc_arguments: opt VcArguments ;  // set only for authenticated calls
};

type MemberData = record {
    member: principal;
    nickname: text;
    joined_timestamp_ns : TimestampNs;
    membership_status: MembershipStatus;
    vc_arguments: opt VcArguments;
};

type FullGroupData = record {
    group_name : text;
    owner : principal;
    issuer_nickname : text;
    stats : GroupStats;
    members : vec MemberData;
};

type PublicGroupsData = record {
    groups : vec PublicGroupData;
};

type GroupsError = variant {
    NotAuthorized : text;
    NotAuthenticated : text;
    AlreadyExists : text;
    NotFound: text;
    Internal : text;
};

service: (opt IssuerInit) -> {
    /// VC-flow API.
    vc_consent_message : (Icrc21VcConsentMessageRequest) -> (variant { Ok : Icrc21ConsentInfo; Err : Icrc21Error;});
    prepare_credential : (PrepareCredentialRequest) -> (variant { Ok : PreparedCredentialData; Err : IssueCredentialError;});
    get_credential : (GetCredentialRequest) -> (variant { Ok : IssuedCredentialData; Err : IssueCredentialError;}) query;
    derivation_origin : (DerivationOriginRequest) -> (variant {Ok: DerivationOriginData; Err: DerivationOriginError});

    /// Configure the issuer (e.g. set the root key), used for deployment/testing.
    configure: (IssuerInit) -> ();

    /// API for setting/getting information about users, groups and group membership.
    set_user : (SetUserRequest) -> (variant { Ok ; Err : GroupsError;}); /// authenticated
    get_user : () -> (variant { Ok : UserData ; Err : GroupsError;}) query; /// authenticated
    group_types : () -> (variant { Ok : GroupTypes; Err : GroupsError;}) query; /// public
    list_groups : (ListGroupsRequest) -> (variant { Ok : PublicGroupsData; Err : GroupsError;}) query;  /// public
    get_group : (GetGroupRequest) -> (variant { Ok : FullGroupData; Err : GroupsError;}) query;  /// authenticated, only for the owner
    add_group : (AddGroupRequest) -> (variant { Ok : FullGroupData; Err : GroupsError;});  /// authenticated
    join_group : (JoinGroupRequest) -> (variant { Ok ; Err : GroupsError;});  /// authenticated
    update_membership : (UpdateMembershipRequest) -> (variant { Ok ; Err : GroupsError;});  /// authenticated, only for the owner

    /// TODO: Admin-API, for controller only, e.g.:
    ///   remove_group()
    ///   remove_member()

    /// Serve the app
    http_request: (request: HttpRequest) -> (HttpResponse) query;
}
