/// This is a demo relying party, that allows experimenting with two roles of the VC flow,
/// namely creating gated content that requires VCs for accessing, and using VCs to access
/// gated content created by others.
/// As this is a demo dapp for the VC flow, users actually don't strictly "create" the content,
/// but rather pick as content an image from a pool of predefined images, and specify
/// the attribute required to access the content, where the attribute is identified
/// by a tuple (<attribute's name>, <issuer's name>), cf. the specification of the meta-issuer.
/// When trying to view a gated content, the user must present the corresponding VC
/// to gain access.

type TimestampNs = nat64;

type ContentError = variant {
    NotAuthorized : text;
    AlreadyExists : text;
    NotFound: text;
    Internal : text;
};

/// Types for requesting a list of available images.
type ListImagesRequest = record {
};

type UploadImagesRequest = record {
};

type ImageData = record {
    url: text;
};

type ImagesList = record {
    images: vec ImageData;
};

/// Types for requesting or adding exclusive content items.
type ListExclusiveContentRequest = record {
    owned_by: opt principal;
};

type ContentData = record {
    content_name: text;
    owner: principal;
    created_timestamp_ns: TimestampNs;
    url: text;
    credential_spec: CredentialSpec;
    credential_issuer: principal;
};

type ExclusiveContentList = record {
    content_items: vec ContentData;
};

type AddExclusiveContentRequest = record {
    content_name: text;
    url: text;
    credential_spec: CredentialSpec;
    credential_issuer: principal;
};

type CredentialSpec = record {
    credential_type : text;
    /// arguments are optional, and specific to the credential_type
    arguments : opt vec record { text; ArgumentValue };
};
type ArgumentValue = variant { "Int" : int32; String : text };

type ValidateVpRequest = record {
    vp_jwt: text;
    effective_vc_subject: principal;
    credential_spec: CredentialSpec;
    issuer_origin: text;
    issuer_canister_id: opt principal;
};

/// Types related to HTTP handling

type HeaderField = record {
    text;
    text;
};

type HttpRequest = record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
    certificate_version: opt nat16;
};

type HttpResponse = record {
    status_code: nat16;
    headers: vec HeaderField;
    body: blob;
};

type IssuerData = record {
    vc_url : text;
    canister_id : principal
};

type RpInit = record {
    ic_root_key_der : vec nat8;
    ii_vc_url : text;
    ii_canister_id : principal;
    issuers : vec IssuerData;
    derivation_origin : text;
};

service: (opt RpInit) -> {
    /// API for creating/accessing exclusive content.
    list_images : (ListImagesRequest) -> (variant { Ok : ImagesList; Err : ContentError;}) query;  /// public
    list_exclusive_content : (ListExclusiveContentRequest) -> (variant { Ok : ExclusiveContentList; Err : ContentError;}) query;  /// public
    add_exclusive_content : (AddExclusiveContentRequest) -> (variant { Ok : ContentData; Err : ContentError;});  /// authenticated
    validate_ii_vp : (ValidateVpRequest) -> (variant { Ok ; Err : ContentError;});

    /// API for configuring and initializing the RP.
    /// authenticated, only for the controller
    configure: (RpInit) -> ();
    upload_images : (UploadImagesRequest) -> (variant { Ok : ImagesList; Err : ContentError;});

    /// Serve the app
    http_request: (request: HttpRequest) -> (HttpResponse) query;
}
